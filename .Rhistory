results.two
?QCAT_GEE
results.two = QCAT_GEE(count.rff, X, 1, X, 1, tax, n.resample=1000, fdr.alpha=0.05)
?scan
scan(what =character(), n=1)
ls
results.two = QCAT_GEE(count.rff, X, 1, X, 1, tax, n.resample=1000, fdr.alpha=0.05)
results.two = QCAT_GEE(count.rff, X, 1, X, 1, tax, n.resample=10, fdr.alpha=0.05)
results.two$sig.lineage
?miLineage
dim(ta)
dim(tax)
count.rff
remove.packages(miLineage)
remove.packages("miLineage")
miLineage
?miLineage
library(miLineage)
data("data.real")
count = data.real$OTU.real
.Rarefy = function (otu.tab)
{
depth = min(rowSums(otu.tab))
otu.tab <- as.matrix(otu.tab)
ind <- (rowSums(otu.tab) < depth)
sam.discard <- rownames(otu.tab)[ind]
otu.tab <- otu.tab[!ind, ]
rarefy <- function(x, depth) {
y <- sample(rep(1:length(x), x), depth)
y.tab <- table(y)
z <- numeric(length(x))
z[as.numeric(names(y.tab))] <- y.tab
z
}
otu.tab.rff <- t(apply(otu.tab, 1, rarefy, depth))
rownames(otu.tab.rff) <- rownames(otu.tab)
colnames(otu.tab.rff) <- colnames(otu.tab)
return(otu.tab.rff)
}
rm(list = ls())
.Rarefy = function (otu.tab)
{
depth = min(rowSums(otu.tab))
otu.tab <- as.matrix(otu.tab)
ind <- (rowSums(otu.tab) < depth)
sam.discard <- rownames(otu.tab)[ind]
otu.tab <- otu.tab[!ind, ]
rarefy <- function(x, depth) {
y <- sample(rep(1:length(x), x), depth)
y.tab <- table(y)
z <- numeric(length(x))
z[as.numeric(names(y.tab))] <- y.tab
z
}
otu.tab.rff <- t(apply(otu.tab, 1, rarefy, depth))
rownames(otu.tab.rff) <- rownames(otu.tab)
colnames(otu.tab.rff) <- colnames(otu.tab)
return(otu.tab.rff)
}
data("data.real")
count = data.real$OTU.real
tax = data.real$Tax.real
X = data.real$covariate.real
count.rff = .Rarefy(count)
results.two = QCAT_GEE(count.rff, X, 1, X, 1, tax, n.resample=10, fdr.alpha=0.05)
results.two$sig.lineage
results.two = QCAT_GEE(count.rff, X, 1, X, 1, tax, n.resample=1000, fdr.alpha=0.05)
results.two
results.two$sig.lineage
str(results.two$sig.lineage)
str(as.character(results.two$sig.lineage))
tax
dim(count.rff)
dim(X)
dim(tax)
results.two = QCAT_GEE(count.rff, X, 1, X, 1, tax, n.resample=100, fdr.alpha=0.05)
results.two
results.two = QCAT_GEE(count.rff, X, 1, X, 1, tax, n.resample=1000, fdr.alpha=0.05)
results.two
View(count.rff)
View(X)
View(tax)
dim(tax)
dim(count.rff)
dim(X)
data("data.real")
tax = data.real$Tax.real
otu = data.real$OTU.real
sample = data.real$covariate.real
OTU = otu_table(otu, taxa_are_rows = FALSE)
TAX = tax_table(tax)
SAMPLE = sample_data(as.data.frame(sample))
physeq = phyloseq(OTU, TAX, SAMPLE)
taxonomy = tax_table(physeq)
otutable = otu_table(physeq)
sampletable = sample_data(physeq)
dim(taxonomy)
dim(otutable)
dim(sampletable)
otu.rff = .Rarefy(otutable)
results.two = QCAT_GEE(otu.rff, sampletable, 1, sampletable, 1, taxonomy, n.resample=1, fdr.alpha=0.05)
data("data.real")
tax = data.real$Tax.real
otu = data.real$OTU.real
sample = data.real$covariate.real
OTU = otu_table(otu, taxa_are_rows = FALSE)
TAX = tax_table(tax)
library(phyloseq)
data("data.real")
tax = data.real$Tax.real
sample = data.real$covariate.real
OTU = otu_table(otu, taxa_are_rows = FALSE)
TAX = tax_table(tax)
SAMPLE = sample_data(as.data.frame(sample))
physeq = phyloseq(OTU, TAX, SAMPLE)
taxonomy = tax_table(physeq)
otutable = otu_table(physeq)
sampletable = sample_data(physeq)
dim(taxonomy)
dim(otutable)
dim(sampletable)
otu.rff = .Rarefy(otutable)
results.two = QCAT_GEE(otu.rff, sampletable, 1, sampletable, 1, taxonomy, n.resample=1, fdr.alpha=0.05)
data("data.real")
count = data.real$OTU.real
tax = data.real$Tax.real
X = data.real$covariate.real
count.rff = .Rarefy(count)
str(count)
str(tax)
str(X)
str(count.rff)
str(otu.rff)
str(sampletable)
str(taxonomy)
sampletable = as.matrix(sampletable)
str(sampletable)
taxonomy = as.matrix(taxonomy)
str(taxonomy)
taxonomy = as.matrix(taxonomy)
str(taxonomy)
taxonomy = as.matrix(taxonomy@.Data)
str(taxonomy)
taxonomy = as.matrix(taxonomy@.Data)
results.two = QCAT_GEE(otu.rff, sampletable, 1, sampletable, 1, taxonomy, n.resample=1, fdr.alpha=0.05)
results.two
results.two = QCAT_GEE(otu.rff, sampletable, 1, sampletable, 1, taxonomy, n.resample=1000, fdr.alpha=0.05)
results.two
str(otu.rff)
str(sampletable)
str(taxonomy)
otu.rff = .Rarefy(otu)
data("data.real")
tax = data.real$Tax.real
otu = data.real$OTU.real
sample = data.real$covariate.real
otu.rff = .Rarefy(otu)
data("data.real")
tax = data.real$Tax.real
otu = data.real$OTU.real
sample = data.real$covariate.real
otu.rff = .Rarefy(otu)
results.two = QCAT_GEE(otu.rff, sample, 1, sample, 1, tax, n.resample=1000, fdr.alpha=0.05)
results.two
#
data("data.real")
tax = data.real$Tax.real
otu = data.real$OTU.real
sample = data.real$covariate.real
otu.rff = .Rarefy(otu)
results.two = QCAT_GEE(otu.rff, sample, 1, sample, 1, tax, n.resample=1000, fdr.alpha=0.05)
results.two
results.two = QCAT_GEE(otu.rff, sample, 1, sample, 1, tax, n.resample=10, fdr.alpha=0.05)
results.two
data("data.real")
tax = data.real$Tax.real
otu = data.real$OTU.real
sample = data.real$covariate.real
# otu.rff = .Rarefy(otu)
results.two = QCAT_GEE(otu.rff, sample, 1, sample, 1, tax, n.resample=10, fdr.alpha=0.05)
results.two
#
data("data.real")
tax = data.real$Tax.real
otu = data.real$OTU.real
sample = data.real$covariate.real
# otu.rff = .Rarefy(otu)
results.two = QCAT_GEE(otu.rff, sample, 1, sample, 1, tax, n.resample=10
#
data("data.real")
tax = data.real$Tax.real
otu = data.real$OTU.real
sample = data.real$covariate.real
# otu.rff = .Rarefy(otu)
results.two = QCAT_GEE(otu.rff, sample, 1, sample, 1, tax, n.resample=100, fdr.alpha=0.05)
results.two$sig.lineage
#
data("data.real")
tax = data.real$Tax.real
otu = data.real$OTU.real
sample = data.real$covariate.real
# otu.rff = .Rarefy(otu)
results.two = QCAT_GEE(otu.rff, sample, 1, sample, 1, tax, n.resample=100, fdr.alpha=0.05)
results.two$sig.lineage
#
data("data.real")
data("data.real")
count = data.real$OTU.real
tax = data.real$Tax.real
X = data.real$covariate.real
# tax = data.real$Tax.real
# otu = data.real$OTU.real
# sample = data.real$covariate.real
count.rff = .Rarefy(count)
results.two = QCAT_GEE(count.rff, X, 1, X, 1, tax, n.resample=1000, fdr.alpha=0.05)
results.two
data("data.real")
count = data.real$OTU.real
tax = data.real$Tax.real
X = data.real$covariate.real
# tax = data.real$Tax.real
# otu = data.real$OTU.real
# sample = data.real$covariate.real
count.rff = .Rarefy(count)
results.two = QCAT_GEE(count.rff, X, 1, X, 1, tax, n.resample=1000, fdr.alpha=0.05)
results.two
result.one = QCAT(count, X, 1, tax, n.resample=1000, fdr.alpha=0.05)
result.one = QCAT(count, X, 1, tax, n.resample=1, fdr.alpha=0.05)
result.one
result.one$sig.lineage
data("data.real")
count = data.real$OTU.real
tax = data.real$Tax.real
X = data.real$covariate.real
result.one = QCAT(count, X, 1, tax, n.resample=10, fdr.alpha=0.05)
result.one
tapply(X=mtcars$mpg, INDEX=mtcars$cyl, FUN=mean)
summary(mtcars)
View(mtcars)
tapply(X=mtcars$mpg, INDEX=mtcars$cyl, FUN=mean)
mean(mtcars(mtcars$cyl == 4,)$mpg)
mean(mtcars[mtcars$cyl == 4,)$mpg])
mean(mtcars[mtcars$cyl == 4,]$mpg)
tapply(X=mtcars$mpg, INDEX=list(mtcars$cyl, mtcars$gear), FUN=mean)
a = array(data=-(1:24), dim=c(3,4,2));
dimnames(a) = list(c("slow", "medium", "fast"), c("cold", "tepid", "warm", "hot"),
c("Monday", "Tuedsay"))
index = matrix(data=c(1,1,1, 2,2,2), nrow=2, ncol=length(dim(a)), byrow=TRUE)
index
a
a[index]
(a %% 2) == 0 # Which values are even?
a[(a %% 2) == 0] # Get even values.
example(melt)
library(reshape2)
example(melt)
?melt
a = airquality
names(airquality) <- tolower(names(airquality))
airquality
names(airquality)
melt(airquality, id=c("month", "day"))
melt(airquality, id=c("month", "day")) %>% View()
library(magrittr)
melt(airquality, id=c("month", "day")) %>% View()
airquality %>% View()
View(melt(airquality, id=c("month", "day")))
library(phyloseq)
data("GlobalPatterns")
sample_data(GlobalPatterns)@.Data
View(sample_data(GlobalPatterns)@.Data)
View(sample_data(GlobalPatterns))
View(otu_table(GlobalPatterns))
View(tax_table(GlobalPatterns))
?dcasrt
?dcast
melt(airquality, id=c("month", "day"))
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
View(aqm)
acast(aqm, day ~ month ~ variable)
acast(aqm, day ~ month ~ variable)
%>% View(title = )
acast(aqm, day ~ month ~ variable %>% View()
)
acast(aqm, day ~ month ~ variable) %>% View()
acast(aqm, day ~ variable) %>% View()
acast(aqm, day ~  month) %>% View()
acast(aqm, day ~  value) %>% View()
acast(aqm, day ~  month) %>% View()
acast(aqm, day ~  month, fun.aggregate = mean) %>% View()
acast(aqm, day ~  month, fun.aggregate = 'mean') %>% View()
acast(aqm, day ~  month, fun.aggregate = "min") %>% View()
acast(aqm, day ~  month, fun.aggregate = min) %>% View()
acast(aqm, day ~  month ~value, fun.aggregate = min) %>% View()
acast(aqm, day ~ month ~ variable) %>% View()
acast(aqm, month ~ variable, mean, margins = TRUE) %>% View()
acast(aqm, day ~ month ~ variable) %>% View()
acast(aqm, month ~ variable, mean, margins = TRUE) %>% View()
acast(aqm, month ~ variable, mean) %>% View()
acast(aqm, month ~ variable, mean, margins = TRUE) %>% View()
acast(aqm, month ~ variable, mean) %>% View()
acast(aqm, month ~ variable) %>% View()
acast(aqm, day ~ month ~ variable) %>% View()
acast(aqm, day ~ month ~ variable ~ value) %>% View()
acast(aqm, day ~ month, value.var = value) %>% View()
acast(aqm, day ~ month, value.var = 'value') %>% View()
guess_value(aqm)
library(reshape2)
guess_value(df)
acast(aqm, day ~ month) %>% View()
acast(aqm, day ~ month, fun.aggregate = NULL) %>% View()
acast(aqm, day ~ month, fun.aggregate = mean) %>% View()
acast(aqm, day ~ month ~value,) %>% View()
acast(aqm, day ~ month ~value) %>% View()
acast(aqm[aqm$variable == "ozone"], day ~ month ~value) %>% View()
acast(aqm[aqm$variable == "ozone",], day ~ month ~value) %>% View()
acast(aqm[aqm$variable == "ozone",], day ~ month) %>% View()
dcast(aqm[aqm$variable == "ozone",], day ~ month) %>% View()
?melt
melt(airquality, id=c("month", "day")) %>% View(title = )
View(airqau )
View(airquality )
dcast(aqm[aqm$variable == "ozone",], day ~ month) %>% View()
?reshape
summary(Indometh)
View(Indometh)
wide <- reshape(Indometh, v.names = "conc", idvar = "Subject",
timevar = "time", direction = "wide")
wide
View(wide)
reshape(wide, direction = "long") %>% View()
str(wide)
reshape(wide, idvar = "Subject", varying = list(2:12),
v.names = "conc", direction = "long")
reshape(wide, idvar = "Subject", varying = list(2:12),
v.names = "conc", direction = "long") %>% View()
df <- data.frame(id = rep(1:4, rep(2,4)),
visit = I(rep(c("Before","After"), 4)),
x = rnorm(4), y = runif(4))
df %>% View()
reshape(df, timevar = "visit", idvar = "id", direction = "wide")
reshape(df, timevar = "visit", idvar = "id", direction = "wide", v.names = "x")
reshape(df, timevar = "visit", idvar = "id", direction = "wide", v.names = "x")
reshape(wide, idvar = "Subject", varying = list(2:12),
v.names = "conc", direction = "long") %>% View()
?aggregate
aggregate(state.x77, list(Region = state.region), mean)
aggregate(state.x77, list(Region = state.region), mean) %>% View()
View(state.x77)
str(state.x77)
state.region
aggregate(state.x77,
list(Region = state.region,
Cold = state.x77[,"Frost"] > 130),
mean)
aggregate(state.x77,
list(Region = state.region,
Cold = state.x77[,"Frost"] > 130),
mean) %>% View()
testDF <- data.frame(v1 = c(1,3,5,7,8,3,5,NA,4,5,7,9),
v2 = c(11,33,55,77,88,33,55,NA,44,55,77,99) )
by1 <- c("red", "blue", 1, 2, NA, "big", 1, 2, "red", 1, NA, 12)
by2 <- c("wet", "dry", 99, 95, NA, "damp", 95, 99, "red", 99, NA, NA)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean") %>% View()
View(testDF)
aggregate(x = testDF, by = list(by1, by2), FUN = "mean") %>% View()
?xtabs
ag <- aggregate(len ~ ., data = ToothGrowth, mean) %>% View()
xtabs(len ~ ., data = ag) %>% View()
ag <- aggregate(len ~ ., data = ToothGrowth, mean) %>% View()
xtabs(len ~ ., data = ag) %>% View()
ag <- aggregate(len ~ ., data = ToothGrowth, mean)
xtabs(len ~ ., data = ag) %>% View()
ag <- aggregate(len ~ ., data = ToothGrowth, mean)
View(ag)
xtabs(len ~ ., data = ag) %>% View()
View(ToothGrowth)
View(ag)
aggregate(. ~ Species, data = iris, mean) %>% View()
View(iris)
library(tidyverse)
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks
stocks %>% spread(key = half, value = return)
stocks %>% spread(key = half, value = return) %>% gather()
stocks %>% spread(key = half, value = return) %>% gather('1':'2', key = year, value = cases)
stocks %>% spread(key = half, value = return) %>% gather('1':'2', key = half, value = cases)
stocks %>% spread(key = half, value = return)
?spread
table4a = tibble(country = c())
#> # A tibble: 3 × 3
#>       country `1999` `2000`
#> *       <chr>  <int>  <int>
#> 1 Afghanistan    745   2666
#> 2      Brazil  37737  80488
#> 3       China 212258 213766
table4a = tibble(country = c("Afghanistan", "Brazil","China"))
#> # A tibble: 3 × 3
#>       country `1999` `2000`
#> *       <chr>  <int>  <int>
#> 1 Afghanistan    745   2666
#> 2      Brazil  37737  80488
#> 3       China 212258 213766
table4a = tibble(country = c("Afghanistan", "Brazil","China"))
table4a
table4a['1999'] = c(745, 37737, 212258)
table4a['2000'] = c(2666,80488, 213766)
table4a
table4a %>%
gather(1999, 2000, key = "year", value = "cases")
?gather
table4a %>%
gather('1999', '2000', key = "year", value = "cases")
table4a %>%
gather(2, 3, key = "year", value = "cases")
table4a %>%
gather(1, 2, key = "year", value = "cases")
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people
people %>% spread(key = key, value = value )
?spread
?sample
sample(1:100000,100000 )
?write()
?read.csv
?scan
library(parallel)
parallel::detectCores()
devtools::install_github("lch14forever/microbiomeViz")
install.packages("devtools")
devtools::install_github("lch14forever/microbiomeViz")
install.packages("git2r")
sys.call("gcc")
sys.call("gcc --version")
system("gcc")
system("gcc --version")
install.packages("git2r")
install.packages("git2r")
install.packages("git2r")
setwd("~/Desktop/miStudio")
library(shiny)
runApp(appDir = )
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(otu.QCAT_GEE)
View(sample.QCAT_GEE)
View(indices.cova.QCAT_GEE)
View(tax.QCAT_GEE)
QCAT_GEE()
QCAT_GEE
View(QCAT_GEE())
View(QCAT_GEE
)
shiny::runApp(display.mode="showcase")
shiny::runApp(display.mode="showcase")
debug(QCAT_GEE)
pval.comb
shiny::runApp(display.mode="showcase")
fdr.alpha
n.resample
pval.comb
Tax
n.resample
View(OTU)
View(X)
X.index
Z
Z.index
n.perm
shiny::runApp(display.mode="showcase")
sample.QCAT_GEE
indices.cova.QCAT_GEE
phyobj
sample_data(phyobj)
X
X
X.index
Z
Z.index
OTU
Tax
min.depth
n.perm
fdr.alpha
shiny::runApp(display.mode="showcase")
OTU
data = list(OTU = OTU, X= X, X.index = X.index, Z.index = Z.index, Tax = Tax, min.depth = min.depth, n.perm = NULL, fdr.alpha = 0.05)
getwd()
save(data, file = "debug.RData")
load("debug.RData")
rm(list = ls())
load("debug.RData")
data
str(data\)
str(data)
